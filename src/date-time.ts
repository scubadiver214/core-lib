import { IDateTime } from './constants';
// generates an object that represents the date string containing:
// - invalidDate: Flag to indicate the dateTimeStr was invalid
// - originalDateStr: original parameter
// - originalDate: original date as generated by new Date(dateTimeStr)
// - currentTimeZoneDate: date object adjusted for the current time zone
// - currentTimeZoneDateStr: date object adjusted for the current time zone represented as MM/dd/YYYY hh:mm:ss AM/PM

// note: Extend the result object as required by adding new properties if necessary
export const parseDateTimeStr = (dateTimeStr: string): IDateTime => {
  const res: IDateTime = {
    invalidDate: true,
    originalDate: undefined,
    originalDateStr: '',
    currentTimeZoneDate: undefined,
    currentTimeZoneDateStr: ''
  };
  try {
    const dt: Date = new Date(dateTimeStr);
    if (!isNaN(dt.getTime())) {
      res.invalidDate = false;
      // originalDate
      res.originalDate = dt;
    }
  } catch {
    return res;
  }
  if (!res.invalidDate) {
    // originalDateStr
    res.originalDateStr = dateTimeStr;
    // currentTimeZoneDate
    res.currentTimeZoneDate = new Date(res.originalDateStr);
    const ua: string = window.navigator.userAgent;
    const msie: number = ua.indexOf('MSIE ');
    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
      res.currentTimeZoneDate = new Date(res.currentTimeZoneDate.getTime() + res.currentTimeZoneDate.getTimezoneOffset() * 60000 * -1);
    }
    // currentTimeZoneDateStr
    const month: string | number = res.currentTimeZoneDate.getMonth() + 1 > 9 ? res.currentTimeZoneDate.getMonth() + 1 : '0' + (res.currentTimeZoneDate.getMonth() + 1);
    const day: string | number = res.currentTimeZoneDate.getDate() > 9 ? res.currentTimeZoneDate.getDate() : '0' + res.currentTimeZoneDate.getDate();
    let hours: string;
    if (res.currentTimeZoneDate.getHours() <= 12) {
      if (res.currentTimeZoneDate.getHours() > 9) {
        hours = res.currentTimeZoneDate.getHours() + '';
      } else {
        hours = '0' + res.currentTimeZoneDate.getHours();
      }
    } else {
      hours = '0' + (res.currentTimeZoneDate.getHours() - 12);
    }
    const minutes: string | number = res.currentTimeZoneDate.getMinutes() > 9 ? res.currentTimeZoneDate.getMinutes() : '0' + res.currentTimeZoneDate.getMinutes();
    const seconds: string | number = res.currentTimeZoneDate.getSeconds() > 9 ? res.currentTimeZoneDate.getSeconds() : '0' + res.currentTimeZoneDate.getSeconds();
    const ampm: string = res.currentTimeZoneDate.getHours() >= 12 ? 'PM' : 'AM';
    res.currentTimeZoneDateStr = [month, day, res.currentTimeZoneDate.getFullYear()].join('/') + ' ' + [hours, minutes, seconds].join(':') + ' ' + ampm;
  }
  return res;
};

export const convertUTCDateToLocalDate = (date: Date): Date => {
  const newDate: Date = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);
  const offset: number = date.getTimezoneOffset() / 60;
  const hours: number = date.getHours();
  newDate.setHours(hours - offset);
  return newDate;
};

export const formatDate = (date: string): string => {
  const datePart = date.split('T');
  const dateParts = datePart[0].split('-');
  return `${dateParts[1]}/${dateParts[2]}/${dateParts[0]}`;
};
